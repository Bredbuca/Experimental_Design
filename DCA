# Diseños completamente aleatorizados
# Especializacion en estadistica

# Determinación del número de repeticiones
install.packages("daewr")
library(daewr)
rmin <-2 #smallest number of replicates considered
rmax <-10 # largest number of replicates considered
alpha <- rep(0.05, rmax - rmin +1)
alpha
sigma <-1.058
sigma
nlev <- 4
nreps <- rmin:rmax
Delta <- 5
power <- Fpower1(alpha,nlev,nreps,Delta,sigma)
power

#arreglo de campo
set.seed(7638)
f <- factor( rep( c("T0", "T1", "T2", "T3", "T4" ), each = 10))
fac <- sample( f, 50)
fac
eu <- 1:50
plan <- data.frame( parcela=eu, tratamientos=fac )
plan
write.csv( plan, file = "Plan.csv", row.names = FALSE)

#Ejercicio 4 capitulo 2 Lawson
library(readxl)
PolvoHornear <- read_excel("PolvoHornear.xlsx")
View(PolvoHornear)
attach(PolvoHornear)

#análisis descriptivo
summary(PolvoHornear)
hist(Altura)
boxplot(Altura~Tratamiento)
std<-sqrt(var(Altura))
std
#ANOVA a una vía CRD
mod_1<-aov(Altura~Tratamiento)
anova(mod_1)
X<-model.matrix(mod_1)
qr(X)$rank
plot(mod_1)
shapiro.test(resid(mod_1))



# Modelamiento de CDR con falsas repeticiones

peces<-read.table("~/Base de datos/FishTank.txt", h=T)
attach(peces)
summary(peces)

#modelamiento sin corrección de variables
mod1<-aov(WtGain~Diet)
anova(mod1)

#correccion por tipo de variable
#mal por estructura del error
Diet<-as.factor(Diet)
mod2<-aov(WtGain~Diet)
anova(mod2)
summary(mod2)

#modelamiento correcto
mod3<-aov(WtGain~Diet + Error(Tank/Diet))
anova(mod3)
summary(mod3)


#modelamiento anova completo con dos FV
Tank<-as.factor(Tank)
mod4<-aov(WtGain~Diet + Tank)
anova(mod4)
summary(mod4)

#Para generar la matriz de diseño.
mod5<-aov(WtGain~Diet+Tank/Diet)
X<-model.matrix(mod5)
qr(X)$
  
View(model.matrix(mod5))
#PRUEBAS DE COMPARACION MULTIPLE
library(agricolae)
print(HSD.test(WtGain, Diet, 9,12, alpha = 0.05))




#EJERCICIO DATOS DE FOTOSINTESIS
#DCA con 3 rep y 6 subrep
#se mide fotosintesis neta en micromoles de CO2 por m2 por seg
#T0=quimico, T1= quim + biologico
#las subrepeticiones son hojas seleccionadas al azar en cada UE
library(readxl)

IRGA_C <- read_excel("~/bases_de_datosDE/IRGA_C.xlsx")
View(IRGA_C)
#analisis exploratorio
#attach(IRGA)
summary(IRGA_C)
str(IRGA_C)
hist(IRGA_C$Fotosintesis)
boxplot(IRGA_C$Fotosintesis~IRGA_C$Tratamiento)
#Modelamiento
#modelo errado, no se consideran las subrepeticiones
mod_0<-aov(Fotosintesis~Tratamiento, data = IRGA_C)
anova(mod_0)
hist(resid(mod_0))
shapiro.test(resid(mod_0))
bartlett.test(Fotosintesis~Tratamiento, data = IRGA_C)
plot(mod_0)

#modelo con test F correcto
mod_1<-aov(Fotosintesis~Tratamiento + 
             Error(Repeticion:Tratamiento),IRGA_C)
summary(mod_1)

#Prueba de Tukey

library(emmeans)
emmeans(mod_1, pairwise ~ Tratamiento, adjust = "tukey")

#MODELO PROMEDIANDO LAS 6 REPETICIONES
library(readxl)
IRGA_2PRO <- read_excel("~/bases_de_datosDE/IRGA_2_AVG.xlsx")
View(IRGA_2PRO)
summary(IRGA_2PRO)
boxplot(IRGA_2PRO$Fotosintesis~IRGA_2PRO$Tratamiento)
hist(IRGA_2PRO$Fotosintesis)
#modelo test F correcto
mod_2<-aov(Fotosintesis~Tratamiento, IRGA_2PRO)
summary(mod_2)
shapiro.test(resid(mod_2))
bartlett.test(Fotosintesis~Tratamiento, IRGA_2PRO)
plot(mod_2)
summary(IRGA_2PRO)
boxplot(IRGA_2PRO$Fotosintesis~IRGA_2PRO$Tratamiento)
hist(IRGA_2PRO$Fotosintesis)



#DISEÑOS FACTORIALES COMPLETAMENTE ALEATORIZADOS
# EJERCICIO 2.12 CASELLA
camaron<-read.table("~/bases_de_datosDE/Shrimp.txt", h=T)
summary(camaron)
attach(camaron)
#Exploratorio
Temp<-as.factor(Temp)
Density<-as.factor(Density)
Salinity<-as.factor(Salinity)
boxplot(WeightGain~Temp)
boxplot(WeightGain~Density)
boxplot(WeightGain~Salinity)

#Modelar
Mod_1<-aov(WeightGain~Temp*Density*Salinity)
anova(Mod_1)
#Bondad de Ajuste.
cv<-100*sqrt(2904)/mean(WeightGain)
cv
#Supuestos
shapiro.test(residuals(Mod_1))
bartlett.test(WeightGain~Temp)
bartlett.test(WeightGain~Density)
bartlett.test(WeightGain~Salinity)

plot(Mod_1)
plot(WeightGain~Temp)


camaron<-read.table("C:/Users/Tuptc/Downloads/Shrimp.txt", h=T)
summary(camaron)
attach(camaron)

#Exploratorio
Temp<-as.factor(Temp)
Density<-as.factor(Density)
Salinity<-as.factor(Salinity)
boxplot(WeightGain~Temp)
boxplot(WeightGain~Density)
boxplot(WeightGain~Salinity)

#Modelar
mod_1<-aov(WeightGain~Temp*Density*Salinity)
anova(mod_1)

plot(TukeyHSD(mod_1))
library(agricolae)
print(HSD.test(camaron$WeightGain,camaron$Temp, 24, 2904))
print(HSD.test(camaron$WeightGain,camaron$Density, 24, 2904))
print(HSD.test(camaron$WeightGain,camaron$Salinity, 24, 2904))

#Interacciones 
interaction.plot(camaron$Salinity,camaron$Temp, camaron$WeightGain,mean)
interaction.plot(camaron$Salinity,camaron$Density, camaron$WeightGain,mean)
interaction.plot(camaron$Density,camaron$Temp, camaron$WeightGain,mean)
TukeyHSD(mod_1)
#Bondad de Ajuste.
cv<-100*sqrt(2904)/mean(WeightGain)
cv
#Supuestos
shapiro.test(residuals(mod_1))
bartlett.test(camaron$WeightGain~camaron$Temp)
bartlett.test(camaron$WeightGain~camaron$Density)
bartlett.test(camaron$WeightGain~camaron$Salinity)

plot(mod_1)
plot(WeightGain~Temp)

library(MASS)
boxcox(mod_1)

install.packages("car")
library(car)
help(aov)

#usando lm
options(contrasts=c("contr.sum","contr.poly"))

mod_2<-aov(camaron$WeightGain~camaron$Temp*camaron$Density*camaron$Salinity)
#Finally, call the drop1 function on each model component:
drop1(mod_2, .~., test="F")


#parcelas Divididas

install.packages("AlgDesign")
library(AlgDesign)

  
